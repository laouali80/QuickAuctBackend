"""
Django settings for auctionBackend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import dj_database_url
import dotenv
from decouple import config
from django.core.files.storage import default_storage

ENVIRONMENT = config("ENVIRONMENT", default="DEVELOPMENT")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# to load the .env variables
dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.getenv('SECRET_KEY')
SECRET_KEY = config("SECRET_KEY")

# ALLOWED_HOSTS = []
# ALLOWED_HOSTS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
#     "http://10.0.2.2:3000",  # Android emulator
# 'http://localhost:8081/'
# ]

ALLOWED_HOSTS = [
    "quickauctbackend-production.up.railway.app",
    ".vercel.app",
    "localhost",
    "10.0.2.2",
    "10.3.80.26",
    "127.0.0.1",
    "https://quickauctbackend.onrender.com",
    "quickauctbackend.onrender.com",
]  # Not recommended for production!


CORS_ALLOWED_ORIGINS = [
    "https://quickauctbackend-production.up.railway.app",
    "http://localhost:8081",
]

CSRF_TRUSTED_ORIGINS = [
    "https://quickauctbackend-production.up.railway.app",
]

CSRF_COOKIE_SECURE = ENVIRONMENT != "DEVELOPMENT"


CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_ALL_ORIGINS = True  # for testing only

SESSION_COOKIE_SAMESITE = "Lax"  # or "None" if accessing from a different domain
SESSION_COOKIE_SECURE = (
    ENVIRONMENT != "DEVELOPMENT"
)  # must be False for HTTP (local dev)

# Daphne
ASGI_APPLICATION = "auctionBackend.asgi.application"

# Channels config
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Use your Redis host and port
        },
    },
}

# profile picture media config


# âœ… Place this last
# if ENVIRONMENT == "DEVELOPMENT":
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_ROOT = BASE_DIR / "mediafiles"
MEDIA_URL = "/media/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "/static/"
# else:

# print("DEFAULT_FILE_STORAGE =", DEFAULT_FILE_STORAGE, file=sys.stderr)


# Email sending config
# EMAIL_HOST = os.getenv('EMAIL_HOST')
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# EMAIL_PORT = os.getenv('EMAIL_PORT')
# EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
# EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')


EMAIL_HOST = config("EMAIL_HOST")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_PORT = config("EMAIL_PORT")
EMAIL_USE_TLS = config("EMAIL_USE_TLS")
EMAIL_BACKEND = config("EMAIL_BACKEND")

INSTALLED_APPS = [
    "daphne",
    "api",
    "rest_framework",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]


ROOT_URLCONF = "auctionBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "auctionBackend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# ENVIRONMENT = os.environ.get('ENVIRONMENT', 'DEVELOPMENT')


# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

print("url: ", config("DB_URL"))
if ENVIRONMENT == "DEVELOPMENT":
    # DEBUG = True
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

    # Optional: Local Redis config (if using Redis locally)
    REDIS_URL = "redis://127.0.0.1:6379/0"
else:
    # DEBUG = False
    # DATABASES["default"] = dj_database_url.parse(config("DB_URL"))
    DATABASES = {
        "default": dj_database_url.parse(
            config("DB_URL"),
            # Replace this value with your local database's connection string.
            # default='postgresql://postgres:postgres@localhost:5432/mysite',
            conn_max_age=600,
        )
    }
    REDIS_URL = config("REDIS_URL")  # Set this in your Railway environment variables
    # DATABASES = {
    #     'default': {
    #         'ENGINE': os.getenv('DB_ENGINE'),
    #         'HOST': os.getenv('DB_HOST'),
    #         'NAME': os.getenv('DB_NAME'),
    #         'USER': os.getenv('DB_USER'),
    #         'PASSWORD': os.getenv('DB_PASSWORD'),
    #         'PORT': os.getenv('DB_PORT'),
    #     }
    # }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"


TIME_ZONE = "Africa/Lagos"


USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static')
# ]

# MEDIAFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    "api.users.auth_backends.UserAuthBackend",  # Custom authentication backend
    "django.contrib.auth.backends.ModelBackend",  # Default backend
]


AUTH_USER_MODEL = "api.User"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(config("ACCESS_TOKEN_EXPIRE_MINUTES"))
    ),  # Short-lived access token
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(config("REFRESH_TOKEN_EXPIRE_TIME"))
    ),  # Long-lived refresh token (1 month)
    "ROTATE_REFRESH_TOKENS": True,  # New refresh token issued every time it's used
    "BLACKLIST_AFTER_ROTATION": True,  # Old refresh tokens become invalid
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": config("JWT_ALGORITHM", "HS256"),
    "SIGNING_KEY": config("JWT_SECRET_KEY"),  # Must be set!
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "userId",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
}


if ENVIRONMENT == "PRODUCTION":
    # AWS and storage configuration
    AWS_LOCATION = "media"

    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
    AWS_S3_CUSTOM_DOMAIN = (
        f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
    )
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"

else:  # DEVELOPMENT
    # Local storage settings
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"

    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

print("Default Storage:", default_storage.__class__)
